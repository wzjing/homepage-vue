<blockquote>
<p>移植ffmpeg到Android系统，对ffmpeg进行跨平台编译并修改其中的功能模块组成，仅编译需要的功能
</p>
</blockquote>
<br/>
<h2>编译环境</h2>
<p>Android是Linux内核，最好是在Linux下进行编译。本文采用Ubuntu 18.0.4 LTS系统进行编译。</p>
<br/>
<p>编译工具🛠</p>
<br/>
<ul>
<li>git — npm install git</li>
<li>make — npm install make</li>
<li>ndk R20 — <a href="https://dl.google.com/android/repository/android-ndk-r20-linux-x86_64.zip">下载地址</a>
</li>
</ul>
<br/>
<h2>编译源码</h2>
<ol style="counter-reset:ol 0">
<li>克隆源码</li>
</ol>
<p>使用git工具从仓库克隆最新源码：</p>
<pre><code class="shell">git clone https://git.ffmpeg.org/ffmpeg.git workspace/ffmpeg
</code></pre>
<br/>
<ol style="counter-reset:ol 1">
<li>编译环境</li>
</ol>
<p> 我们需要将NDK的工具链暴露到环境变量中，并且修改默认的编译变量的值，如$cc </p/>
<pre><code class="language-shell">cd workspace

$MIN_API=21
export $ARCH=arm64
export $TOOLCHAIN=/path/to/ndk
export $INSTALL_DIR=`pwd`/build/$ARCH
export $CROSS_PREFIX=&quot;aarch64-linux-android&quot;
export CC=armv7a-linux-androideabi${MIN_API}-clang
export CXX=armv7a-linux-androideabi${MIN_API}-clang++
export AR=$CROSS_PREFIX-ar
export AS=$CC
export LD=$CROSS_PREFIX-ld
export STRIP=$CROSS_PREFIX-strip
export PATH=$PATH:$TOOLCHAIN/bin

EXTRA_CFLAGS=&quot;-fPIC -fPIE&quot;
EXTRA_LDFLAGS=&quot;-fpie&quot;
</code></pre>
<br/>
<ol style="counter-reset:ol 2">
<li>配置configure</li>
</ol>
<p>对ffmpeg的自带模块和编译选项做一些必要的配置，这里列出一个常用的编译配置，其他的一些编译选项可自行使用<code>./configure --help</code>进行查看</p>
<pre><code class="language-shell">cd ffmpeg

./configure --enable-gpl \
    --enable-version3 \
    --enable-nonfree \
    --target-os=android \
    --disable-static \
    --enable-shared \
    --enable-pic \
    --arch=arm64 \
    --prefix=$INSTALL_DIR \
    --sysroot=$TOOLCHAIN/sysroot \
    --enable-small \
    --disable-programs \
    --disable-doc \
    --enable-debug \
    --enable-mediacodec \
    --enable-jni \
    --logfile=$CONFIGURE_LOG \
    --enable-cross-compile \
    --cross-prefix=$CROSS_PREFIX- \
    --cc=$CC \
    --cxx=$CXX \
    --objcc=$CC \
    --dep-cc=$CC \
    --pkg-config=pkg-config \
    --extra-cflags=&quot;$EXTRA_CFLAGS&quot; \
    --extra-ldflags=&quot;$EXTRA_LDFLAGS&quot;
</code></pre>
<ul>
<li>通过prefix选项设置编译结果的保存目录</li>
<li>关闭doc、programs生成、静态库生成等一些不必要的功能</li>
<li>设置android编译参数，target-os设置为android，cpu的arch设置为arm64，sysroot设置为ndk的sysroot路径</li>
<li>硬件解码的支持，ffmpeg可以开启对android硬件解码的支持，可以极大的提升解码效率，需要启动mediacodec和jni，但是并不支持硬件编码😔</li>
<li>设置关于编译及优化相关的选项，比如pic，pkg-config，cc，等，还可以添加额外的编译参数和连接参数</li>
</ul>
<br/>
<ol style="counter-reset:ol 3">
<li>开始编译</li>
</ol>
<p>根据自己的cpu核心数设置编译可用的最大线程，一般最好等于cpu的核心数</p>
<pre><code class="language-shell">make clean
make -j 4
make install
</code></pre>
<br/>
<h2>使用</h2>
<p>在Android Studio工程中加入C++支持，或新建支持C++的Android工程，相关设置可自行按照Android Studio引导操作，我们主要关心一下CMake的相关设置
</p>
<br/>
<ol>
<li>首先在Android Studio工程的jniLibs目录下新建arm64目录，将生成的so动态库文件和include头文件拷贝到此文件夹</li>
<li>在CMakeLists.txt中添加ffmpeg的库</li>
</ol>
<pre><code class="language-cmake">set(JNI_LIBS &quot;../src/main/jniLibs&quot;)
function(import_library name type filename)
    add_library(${name} ${type} IMPORTED)
    set_target_properties(${name} PROPERTIES IMPORTED_LOCATION ${JNI_LIBS}/${CMAKE_ANDROID_ARCH_ABI}/${filename})
endfunction()

import_library(avcodec SHARED libavcodec.so)
import_library(avformat SHARED libavformat.so)
import_library(avfilter SHARED libavfilter.so)
import_library(avutil SHARED libavutil.so)
import_library(swresample SHARED libswresample.so)
import_library(swscale SHARED libswscale.so)

include_directories(&quot;${JNI_LIBS}/include&quot;)
</code></pre>
<br/>
